Question:=>
Given a string find longest palindromic substring:
Input: s = "forgeeksskeegfor" 
Output: "geeksskeeg"
Explanation: There are several possible palindromic substrings like "kssk", "ss", "eeksskee" etc. But the substring "geeksskeeg" is the longest among all.

Input: s = "Geeks" 
Output: "ee"

Input: s = "abc" 
Output: "a"

Input: s = "" 
Output: ""

Solution:=>
BRUTE FORCE APPROACH: Time Complexity-O(n3) Space Complexity-O(1)
    Generate all possible substrings and check for longest palindromic string 

DYNAMIC PROGRAMMING: Time Complexity-O(n2) Space Complexity-O(n2)
    1. Generate n*n size 2D matrix. We will store length of palindrome in it
    2. Iterate diagonally from (0,0),(1,1)...(n,n);(0,1),(1,2),...(n-1,n);(0,2),(1,3),...(n-2,n)
    3. You can see outer loop would be for difference in i.e. 0 to n times it will run and inner loop will start from i = 0, j = i+diff 
    until j<n and i++,j++ in other words for i in range(n-diff), j = i+diff 
        for diff in range(n):
            for i in range(n-diff):
                j = i + diff
        a. For first diagonal i.e. (0,0),(1,1),..,(n,n):
            i. It means that we have only one character and one character is always palindrome so store 1 in DP[i][j] where i==j 
        b. For second diagonal i.e. (0,1),(1,2),...,(n-1,n) we will have substrings with only length = 2 
            i. Check if s[i] == s[j] if yes it means substring is palindrome so store DP[i][j] = 2 
        c. For rest of the cases:
            i. Check if s[i] == s[j] and the inner substring between s[i] and s[j] is palindrome
            ii. Inner string details would be stored in DP[i+1][j-1] 
            iii. Consider babad: i = 1(a),j = 3(a) so we are checking b i.e. i+1 and j - 1 is palindrome or not
    4. Check if the string is palindrome i.e. if DP[i][j] != 0 and if the length of string we got is maximum i.e. j-i+1 > max
    then store that max length and string i.e. s[i:j+1]